from BSTree import BSTree as BST
import BSTree
from RBTree import RBTree as RBT
import RBTree
from HashTable import HashTable as HT
import HashTable
from FileHandler import FileHandler
from Combining import Combining


def test():
    # Заполнение файла 1000 записями.
    print("__________________________________________________________________________________________")
    print("Запущено тестирование программы для случая, когда в файле 1000 записей.")

    # Генератор случайных чисел для заполнения файла.
    import random  # Импорт библиотеки random.
    numbers = list(range(110303000, 110304000))  # Список с номерами поездов (от 110303000 до 110304000).
    random.shuffle(numbers)  # Перемешивание списка.
    f = open('data.txt', 'w')  # Открытие файла "data.txt" на запись.
    i = 0  # Для первой записи в номер_поезда будет записан первый элемент из списка numbers.
    for x in range(1000):  # Повторять 1000 раз:
        # Запись в строку "номер_поезда;место_отправления;место_прибытия;время_отправления".
        f.write(str(numbers[i]) + ';' + 'Place' + str(random.randint(1, 500)) + ';' +
                'Place' + str(random.randint(501, 999)) + ';' + 'Time' + str(random.randint(1, 999)) + "\n")
        i += 1  # Для следующей записи в номер_поезда будет записан следующий элемент из списка numbers.
    f.close()  # Закрытие файла "data.txt".

    # Создание объекта для работы с файлом с четырьмя полями.
    fw = FileHandler('data.bin', {'key': 11, 'place1': 10, 'place2': 10, 'time1': 9})
    bs = BST()  # Создание БДП.
    rb = RBT()  # Создание СДП.
    ht = HT()  # Создание хеш-таблицы.
    bs_comb = Combining(bs, fw)  # Объединение работы файла и БДП.
    rb_comb = Combining(rb, fw)  # Объединение работы файла и СДП.
    ht_comb = Combining(ht, fw)  # Объединение работы файла и хеш-таблицы.
    fill_comb(bs_comb, 'data.txt')  # Заполнение БДП из файла.
    fill_comb(rb_comb, 'data.txt')  # Заполнение СДП из файла.
    fill_comb(ht_comb, 'data.txt')  # Заполнение хеш-таблицы из файла.
    # print(bs_comb.combining)  # Вывод БДП.
    # print(rb_comb.combining)  # Вывод СДП.
    # HT.print()  # Вывод хеш-таблицы.

    # Получение первой записи файла по ключу.
    print("__________________________________________________________________________________________(000)")
    print("Получение первой записи с помощью бинарного дерева поиска:")
    print()
    print(bs_comb.get(str(numbers[0])))
    print(f'Число произведённых сравнений при получении первой записи: {BSTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение первой записи с помощью СДП (красно-чёрного дерева):")
    print()
    print(rb_comb.get(str(numbers[0])))
    print(f'Число произведённых сравнений при получении первой записи: {RBTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение первой записи с помощью хеш-таблицы:")
    print()
    print(ht_comb.get(str(numbers[0])))
    print(f'Число произведённых сравнений при получении первой записи: {HashTable.compares}')

    # Получение последней записи файла по ключу.
    print("__________________________________________________________________________________________(999)")
    print("Получение последней записи с помощью бинарного дерева поиска:")
    print()
    print(bs_comb.get(str(numbers[999])))
    print(f'Число произведённых сравнений при получении последней записи: {BSTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение последней записи с помощью СДП (красно-чёрного дерева):")
    print()
    print(rb_comb.get(str(numbers[999])))
    print(f'Число произведённых сравнений при получении последней записи: {RBTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение последней записи с помощью хеш-таблицы:")
    print()
    print(ht_comb.get(str(numbers[999])))
    print(f'Число произведённых сравнений при получении последней записи: {HashTable.compares}')

    # Получение по ключу записи, расположенной в середине файла.
    print("__________________________________________________________________________________________(499)")
    print("Получение записи, расположенной в середине файла, с помощью бинарного дерева поиска:")
    print()
    print(bs_comb.get(str(numbers[499])))
    print(f'Число произведённых сравнений при получении записи, расположенной в середине файла: {BSTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение записи, расположенной в середине файла, с помощью СДП (красно-чёрного дерева):")
    print()
    print(rb_comb.get(str(numbers[499])))
    print(f'Число произведённых сравнений при получении записи, расположенной в середине файла: {RBTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение записи, расположенной в середине файла, с помощью хеш-таблицы:")
    print()
    print(ht_comb.get(str(numbers[499])))
    print(f'Число произведённых сравнений при получении записи, расположенной в середине файла: {HashTable.compares}')

    # from time import sleep
    # sleep(10)  # Перерыв, чтобы успеть заскринить предыдущие записи в файле.

    # Заполнение файла 10000 записями.
    print("___________________________________________________________________________________________")
    print("Запущено тестирование программы для случая, когда в файле 10000 записей.")
    # Генератор случайных чисел для заполнения файла.
    import random  # Импорт библиотеки random.
    numbers = list(range(1103030000, 1103040000))  # Список с номерами поездов (от 1103030000 до 1103040000).
    random.shuffle(numbers)  # Перемешивание списка.
    f = open('data.txt', 'w')  # Открытие файла "data.txt" на запись.
    i = 0  # Для первой записи в номер_поезда будет записан первый элемент из списка numbers.
    for x in range(10000):  # Повторять 10000 раз:
        # Запись в строку "номер_поезда;место_отправления;место_прибытия;время_отправления".
        f.write(str(numbers[i]) + ';' + 'Place' + str(random.randint(1, 5000)) + ';' +
                'Place' + str(random.randint(5001, 9999)) + ';' + 'Time' + str(random.randint(1, 9999)) + "\n")
        i += 1  # Для следующей записи в номер_поезда будет записан следующий элемент из списка numbers.
    f.close()  # Закрытие файла "data.txt".

    # Создание объекта для работы с файлом с четырьмя полями.
    fw = FileHandler('data.bin', {'key': 11, 'place1': 10, 'place2': 10, 'time1': 9})
    bs = BST()  # Создание БДП.
    rb = RBT()  # Создание СДП.
    ht = HT()  # Создание хеш-таблицы.
    bs_comb = Combining(bs, fw)  # Объединение работы файла и БДП.
    rb_comb = Combining(rb, fw)  # Объединение работы файла и СДП.
    ht_comb = Combining(ht, fw)  # Объединение работы файла и хеш-таблицы.
    fill_comb(bs_comb, 'data.txt')  # Заполнение БДП из файла.
    fill_comb(rb_comb, 'data.txt')  # Заполнение СДП из файла.
    fill_comb(ht_comb, 'data.txt')  # Заполнение хеш-таблицы из файла.
    # print(bs_comb.combining)  # Вывод БДП.
    # print(rb_comb.combining)  # Вывод СДП.
    # HT.print()  # Вывод хеш-таблицы.

    # Получение первой записи файла по ключу.
    print("__________________________________________________________________________________________(0000)")
    print("Получение первой записи с помощью бинарного дерева поиска:")
    print()
    print(bs_comb.get(str(numbers[0])))
    print(f'Число произведённых сравнений при получении первой записи: {BSTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение первой записи с помощью СДП (красно-чёрного дерева):")
    print()
    print(rb_comb.get(str(numbers[0])))
    print(f'Число произведённых сравнений при получении первой записи: {RBTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение первой записи с помощью хеш-таблицы:")
    print()
    print(ht_comb.get(str(numbers[0])))
    print(f'Число произведённых сравнений при получении первой записи: {HashTable.compares}')

    # Получение последней записи файла по ключу.
    print("__________________________________________________________________________________________(9999)")
    print("Получение последней записи с помощью бинарного дерева поиска:")
    print()
    print(bs_comb.get(str(numbers[9999])))
    print(f'Число произведённых сравнений при получении последней записи: {BSTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение последней записи с помощью СДП (красно-чёрного дерева):")
    print()
    print(rb_comb.get(str(numbers[9999])))
    print(f'Число произведённых сравнений при получении последней записи: {RBTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение последней записи с помощью хеш-таблицы:")
    print()
    print(ht_comb.get(str(numbers[9999])))
    print(f'Число произведённых сравнений при получении последней записи: {HashTable.compares}')

    # Получение по ключу записи, расположенной в середине файла.
    print("__________________________________________________________________________________________(4999)")
    print("Получение записи, расположенной в середине файла, с помощью бинарного дерева поиска:")
    print()
    print(bs_comb.get(str(numbers[4999])))
    print(f'Число произведённых сравнений при получении записи, расположенной в середине файла: {BSTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение записи, расположенной в середине файла, с помощью СДП (красно-чёрного дерева):")
    print()
    print(rb_comb.get(str(numbers[4999])))
    print(f'Число произведённых сравнений при получении записи, расположенной в середине файла: {RBTree.compares}')
    print("-----------------------------------------------------------------------------------------")
    print("Получение записи, расположенной в середине файла, с помощью хеш-таблицы:")
    print()
    print(ht_comb.get(str(numbers[4999])))
    print(f'Число произведённых сравнений при получении записи, расположенной в середине файла: {HashTable.compares}')


def fill_comb(comb: 'Combining', path: str):
    with open(path, 'r') as f:
        for line in f:
            line = line.split(';')
            comb.add(key=line[0], place1=line[1], place2=line[2], time1=line[3])


if __name__ == '__main__':
    test()